
Testing Adventurer
Checking hand count
Expected: 7, Actual: 5
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 5
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 10, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 10, Actual: 11
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 10, Actual: 11
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 5
hand count incorrect
Checking hand count
Expected: 7, Actual: 5
hand count incorrect
Checking hand count
Expected: 7, Actual: 7
hand count correct
Checking hand count
Expected: 7, Actual: 8
hand count incorrect
Checking hand count
Expected: 7, Actual: 8
hand count incorrect

TEST COMPLETED
Function 'updateCoins'
Lines executed:81.82% of 11
No branches
No calls

Function 'gainCard'
Lines executed:61.54% of 13
No branches
No calls

Function 'discardCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:0.00% of 180
No branches
No calls

Function 'ambassadorEffect'
Lines executed:0.00% of 22
No branches
No calls

Function 'cutpurseEffect'
Lines executed:0.00% of 13
No branches
No calls

Function 'stewardEffect'
Lines executed:0.00% of 10
No branches
No calls

Function 'adventurerEffect'
Lines executed:100.00% of 15
No branches
No calls

Function 'smithyEffect'
Lines executed:0.00% of 5
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:100.00% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:0.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:0.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:100.00% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:96.77% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
No branches
No calls

Function 'assertBool'
Lines executed:0.00% of 5
No branches
No calls

File 'dominion.c'
Lines executed:24.56% of 562
Branches executed:21.48% of 419
Taken at least once:18.85% of 419
Calls executed:11.34% of 97
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function assertBool called 0 returned 0% blocks executed 0%
    #####:    8:void assertBool(int a, int b) {
    $$$$$:    8-block  0
    #####:    9:	if (a == b) {
    $$$$$:    9-block  0
branch  0 never executed
branch  1 never executed
    #####:   10:		printf(" TEST SUCCESS\n");
    $$$$$:   10-block  0
call    0 never executed
unconditional  1 never executed
        -:   11:	}
        -:   12:	else {
    #####:   13:		printf(" TEST FAILURE\n");
    $$$$$:   13-block  0
call    0 never executed
unconditional  1 never executed
        -:   14:	}
    #####:   15:}
        -:   16:
function compare called 749 returned 100% blocks executed 100%
      749:   17:int compare(const void* a, const void* b) {
      749:   17-block  0
      749:   18:  if (*(int*)a > *(int*)b)
      749:   18-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 742
        7:   19:    return 1;
        7:   19-block  0
unconditional  0 taken 7
      742:   20:  if (*(int*)a < *(int*)b)
      742:   20-block  0
branch  0 taken 192 (fallthrough)
branch  1 taken 550
      192:   21:    return -1;
      192:   21-block  0
unconditional  0 taken 192
      550:   22:  return 0;
      550:   22-block  0
unconditional  0 taken 550
        -:   23:}
        -:   24:
function newGame called 0 returned 0% blocks executed 0%
    #####:   25:struct gameState* newGame() {
    $$$$$:   25-block  0
    #####:   26:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:  return g;
    $$$$$:   27-block  0
unconditional  0 never executed
        -:   28:}
        -:   29:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   30-block  0
        -:   31:		  int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
    $$$$$:   43-block  0
unconditional  0 never executed
        -:   44:}
        -:   45:
function initializeGame called 20 returned 100% blocks executed 97%
       20:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
       20:   46-block  0
        -:   47:		   struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;			
        -:   52:  //set up random number generator
       20:   53:  SelectStream(1);
       20:   53-block  0
call    0 returned 20
       20:   54:  PutSeed((long)randomSeed);
call    0 returned 20
        -:   55:  
        -:   56:  //check number of players
       20:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 15 (fallthrough)
branch  1 taken 5
       15:   57-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 15
        -:   58:    {
        5:   59:      return -1;
        5:   59-block  0
unconditional  0 taken 5
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
       15:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
      165:   66:  for (i = 0; i < 10; i++)
       15:   66-block  0
unconditional  0 taken 15
      150:   66-block  1
unconditional  1 taken 150
      165:   66-block  2
branch  2 taken 150
branch  3 taken 15 (fallthrough)
        -:   67:    {
     1650:   68:      for (j = 0; j < 10; j++)
      150:   68-block  0
unconditional  0 taken 150
     1500:   68-block  1
unconditional  1 taken 1500
     1650:   68-block  2
branch  2 taken 1500
branch  3 taken 150 (fallthrough)
        -:   69:        {
     1500:   70:	  if (j != i && kingdomCards[j] == kingdomCards[i])
     1500:   70-block  0
branch  0 taken 1350 (fallthrough)
branch  1 taken 150
     1350:   70-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 1350
        -:   71:	    {
    #####:   72:	      return -1;
    $$$$$:   72-block  0
unconditional  0 never executed
        -:   73:	    }
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
       15:   82:  if (numPlayers == 2)
       15:   82-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 11
        -:   83:    {
        4:   84:      state->supplyCount[curse] = 10;
        4:   84-block  0
unconditional  0 taken 4
        -:   85:    }
       11:   86:  else if (numPlayers == 3)
       11:   86-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 7
        -:   87:    {
        4:   88:      state->supplyCount[curse] = 20;
        4:   88-block  0
unconditional  0 taken 4
        -:   89:    }
        -:   90:  else
        -:   91:    {
        7:   92:      state->supplyCount[curse] = 30;
        7:   92-block  0
unconditional  0 taken 7
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
       15:   96:  if (numPlayers == 2)
       15:   96-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 11
        -:   97:    {
        4:   98:      state->supplyCount[estate] = 8;
        4:   99:      state->supplyCount[duchy] = 8;
        4:  100:      state->supplyCount[province] = 8;
        4:  100-block  0
unconditional  0 taken 4
        -:  101:    }
        -:  102:  else
        -:  103:    {
       11:  104:      state->supplyCount[estate] = 12;
       11:  105:      state->supplyCount[duchy] = 12;
       11:  106:      state->supplyCount[province] = 12;
       11:  106-block  0
unconditional  0 taken 11
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
       15:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  111:  state->supplyCount[silver] = 40;
       15:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
      315:  115:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
       15:  115-block  0
unconditional  0 taken 15
      300:  115-block  1
unconditional  1 taken 300
      315:  115-block  2
branch  2 taken 300
branch  3 taken 15 (fallthrough)
        -:  116:    {
     2475:  117:      for (j = 0; j < 10; j++)           		//loop chosen cards
      300:  117-block  0
unconditional  0 taken 300
     2175:  117-block  1
unconditional  1 taken 2175
     2475:  117-block  2
branch  2 taken 2325
branch  3 taken 150 (fallthrough)
        -:  118:	{
     2325:  119:	  if (kingdomCards[j] == i)
     2325:  119-block  0
branch  0 taken 150 (fallthrough)
branch  1 taken 2175
        -:  120:	    {
        -:  121:	      //check if card is a 'Victory' Kingdom card
      150:  122:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
      150:  122-block  0
branch  0 taken 150 (fallthrough)
branch  1 taken 0
      150:  122-block  1
branch  2 taken 15 (fallthrough)
branch  3 taken 135
        -:  123:		{
       30:  124:		  if (numPlayers == 2){ 
       15:  124-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 11
       15:  124-block  1
unconditional  2 taken 15
        4:  125:		    state->supplyCount[i] = 8; 
        4:  125-block  0
unconditional  0 taken 4
        -:  126:		  }
       11:  127:		  else{ state->supplyCount[i] = 12; }
       11:  127-block  0
unconditional  0 taken 11
        -:  128:		}
        -:  129:	      else
        -:  130:		{
      135:  131:		  state->supplyCount[i] = 10;
      135:  131-block  0
unconditional  0 taken 135
        -:  132:		}
      150:  133:	      break;
      150:  133-block  0
unconditional  0 taken 150
        -:  134:	    }
        -:  135:	  else    //card is not in the set choosen for the game
        -:  136:	    {
     2175:  137:	      state->supplyCount[i] = -1;
        -:  138:	    }
        -:  139:	}
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
       63:  147:  for (i = 0; i < numPlayers; i++)
       15:  147-block  0
unconditional  0 taken 15
       48:  147-block  1
unconditional  1 taken 48
       63:  147-block  2
branch  2 taken 48
branch  3 taken 15 (fallthrough)
        -:  148:    {
       48:  149:      state->deckCount[i] = 0;
      192:  150:      for (j = 0; j < 3; j++)
       48:  150-block  0
unconditional  0 taken 48
      144:  150-block  1
unconditional  1 taken 144
      192:  150-block  2
branch  2 taken 144
branch  3 taken 48 (fallthrough)
        -:  151:	{
      144:  152:	  state->deck[i][j] = estate;
      144:  153:	  state->deckCount[i]++;
        -:  154:	}
      384:  155:      for (j = 3; j < 10; j++)
       48:  155-block  0
unconditional  0 taken 48
      336:  155-block  1
unconditional  1 taken 336
      384:  155-block  2
branch  2 taken 336
branch  3 taken 48 (fallthrough)
        -:  156:	{
      336:  157:	  state->deck[i][j] = copper;
      336:  158:	  state->deckCount[i]++;		
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
       63:  163:  for (i = 0; i < numPlayers; i++)
       15:  163-block  0
unconditional  0 taken 15
       48:  163-block  1
unconditional  1 taken 48
       63:  163-block  2
branch  2 taken 48
branch  3 taken 15 (fallthrough)
        -:  164:    {
       48:  165:      if ( shuffle(i, state) < 0 )
       48:  165-block  0
call    0 returned 48
branch  1 taken 0 (fallthrough)
branch  2 taken 48
        -:  166:	{
    #####:  167:	  return -1;
    $$$$$:  167-block  0
unconditional  0 never executed
        -:  168:	}
        -:  169:    }
        -:  170:
        -:  171:  //draw player hands
       63:  172:  for (i = 0; i < numPlayers; i++)
       15:  172-block  0
unconditional  0 taken 15
       48:  172-block  1
unconditional  1 taken 48
       63:  172-block  2
branch  2 taken 48
branch  3 taken 15 (fallthrough)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
       48:  175:      state->handCount[i] = 0;
       48:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //	{
        -:  180:      //	  drawCard(i, state);
        -:  181:      //	}
        -:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
      420:  185:  for (i = 0; i <= treasure_map; i++)
       15:  185-block  0
unconditional  0 taken 15
      405:  185-block  1
unconditional  1 taken 405
      420:  185-block  2
branch  2 taken 405
branch  3 taken 15 (fallthrough)
        -:  186:    {
      405:  187:      state->embargoTokens[i] = 0;
        -:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
       15:  191:  state->outpostPlayed = 0;
       15:  192:  state->phase = 0;
       15:  193:  state->numActions = 1;
       15:  194:  state->numBuys = 1;
       15:  195:  state->playedCardCount = 0;
       15:  196:  state->whoseTurn = 0;
       15:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
       90:  201:  for (it = 0; it < 5; it++){
       15:  201-block  0
unconditional  0 taken 15
unconditional  1 taken 75
       90:  201-block  1
branch  2 taken 75
branch  3 taken 15 (fallthrough)
       75:  202:    drawCard(state->whoseTurn, state);
       75:  202-block  0
call    0 returned 75
        -:  203:  }
        -:  204:
       15:  205:  updateCoins(state->whoseTurn, state, 0);
       15:  205-block  0
call    0 returned 15
        -:  206:
       15:  207:  return 0;
unconditional  0 taken 15
        -:  208:}
        -:  209:
function shuffle called 84 returned 100% blocks executed 100%
       84:  210:int shuffle(int player, struct gameState *state) {
       84:  210-block  0
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
       84:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
       84:  218:  if (state->deckCount[player] < 1)
       84:  218-block  0
branch  0 taken 34 (fallthrough)
branch  1 taken 50
       34:  219:    return -1;
       34:  219-block  0
unconditional  0 taken 34
       50:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
       50:  220-block  0
call    0 returned 50
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
      547:  223:  while (state->deckCount[player] > 0) {
unconditional  0 taken 50
      547:  223-block  0
branch  1 taken 497
branch  2 taken 50 (fallthrough)
      497:  224:    card = floor(Random() * state->deckCount[player]);
      497:  224-block  0
call    0 returned 497
      497:  225:    newDeck[newDeckPos] = state->deck[player][card];
      497:  226:    newDeckPos++;
     1730:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 497
     1233:  227-block  0
unconditional  1 taken 1233
     1730:  227-block  1
branch  2 taken 1233
branch  3 taken 497 (fallthrough)
     1233:  228:      state->deck[player][i] = state->deck[player][i+1];
        -:  229:    }
      497:  230:    state->deckCount[player]--;
      497:  230-block  0
unconditional  0 taken 497
        -:  231:  }
      547:  232:  for (i = 0; i < newDeckPos; i++) {
       50:  232-block  0
unconditional  0 taken 50
      497:  232-block  1
unconditional  1 taken 497
      547:  232-block  2
branch  2 taken 497
branch  3 taken 50 (fallthrough)
      497:  233:    state->deck[player][i] = newDeck[i];
      497:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
       84:  237:  return 0;
       50:  237-block  0
unconditional  0 taken 50
       84:  237-block  1
unconditional  1 taken 84
        -:  238:}
        -:  239:
function playCard called 0 returned 0% blocks executed 0%
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  240-block  0
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
    $$$$$:  246-block  0
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
    $$$$$:  248-block  0
unconditional  0 never executed
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
    $$$$$:  252-block  0
branch  0 never executed
branch  1 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
    $$$$$:  258-block  0
call    0 never executed
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  261-block  0
branch  2 never executed
branch  3 never executed
        -:  262:    {
    #####:  263:      return -1;
    $$$$$:  263-block  0
unconditional  0 never executed
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  267-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:    {
    #####:  269:      return -1;
    $$$$$:  269-block  0
unconditional  0 never executed
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  276-block  0
call    0 never executed
        -:  277:	
    #####:  278:  return 0;
unconditional  0 never executed
    $$$$$:  278-block  0
unconditional  1 never executed
        -:  279:}
        -:  280:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  281-block  0
    $$$$$:  281-block  1
unconditional  0 never executed
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
    $$$$$:  291-block  0
branch  0 never executed
branch  1 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    $$$$$:  294-block  0
unconditional  0 never executed
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  295-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    $$$$$:  298-block  0
unconditional  0 never executed
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
    $$$$$:  302-block  0
unconditional  0 never executed
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  306-block  0
call    0 never executed
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  309:    state->numBuys--;
unconditional  0 never executed
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    $$$$$:  317-block  0
unconditional  0 never executed
        -:  318:}
        -:  319:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  320:int numHandCards(struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  321-block  0
call    0 never executed
unconditional  1 never executed
        -:  322:}
        -:  323:
function handCard called 0 returned 0% blocks executed 0%
    #####:  324:int handCard(int handPos, struct gameState *state) {
    $$$$$:  324-block  0
    #####:  325:  int currentPlayer = whoseTurn(state);
    $$$$$:  325-block  0
call    0 never executed
    #####:  326:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  327:}
        -:  328:
function supplyCount called 20 returned 100% blocks executed 100%
       20:  329:int supplyCount(int card, struct gameState *state) {
       20:  329-block  0
       20:  330:  return state->supplyCount[card];
       20:  330-block  0
unconditional  0 taken 20
        -:  331:}
        -:  332:
        -:  333://returns count of the deck
        -:  334:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  335:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  335-block  0
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  339-block  0
unconditional  0 never executed
    $$$$$:  339-block  1
unconditional  1 never executed
    $$$$$:  339-block  2
branch  2 never executed
branch  3 never executed
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    $$$$$:  341-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  341-block  1
unconditional  2 never executed
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  344-block  0
unconditional  0 never executed
    $$$$$:  344-block  1
unconditional  1 never executed
    $$$$$:  344-block  2
branch  2 never executed
branch  3 never executed
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    $$$$$:  346-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  346-block  1
unconditional  2 never executed
        -:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  349-block  0
unconditional  0 never executed
    $$$$$:  349-block  1
unconditional  1 never executed
    $$$$$:  349-block  2
branch  2 never executed
branch  3 never executed
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    $$$$$:  351-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  351-block  1
unconditional  2 never executed
        -:  352:    }
        -:  353:
    #####:  354:  return count;
    $$$$$:  354-block  0
unconditional  0 never executed
        -:  355:}
        -:  356:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  357:int whoseTurn(struct gameState *state) {
    $$$$$:  357-block  0
    #####:  358:  return state->whoseTurn;
    $$$$$:  358-block  0
unconditional  0 never executed
        -:  359:}
        -:  360:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  361:int endTurn(struct gameState *state) {
    $$$$$:  361-block  0
        -:  362:  int k;
        -:  363:  int i;
    #####:  364:  int currentPlayer = whoseTurn(state);
    $$$$$:  364-block  0
call    0 never executed
        -:  365:  
        -:  366:  //Discard hand
    #####:  367:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  367-block  0
unconditional  1 never executed
    $$$$$:  367-block  1
branch  2 never executed
branch  3 never executed
    #####:  368:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  369:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  370:  }
    #####:  371:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  372:    
        -:  373:  //Code for determining the player
    #####:  374:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  374-block  0
branch  0 never executed
branch  1 never executed
    #####:  375:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  375-block  0
unconditional  0 never executed
        -:  376:  }
        -:  377:  else{
    #####:  378:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  378-block  0
unconditional  0 never executed
        -:  379:  }
        -:  380:
    #####:  381:  state->outpostPlayed = 0;
    #####:  382:  state->phase = 0;
    #####:  383:  state->numActions = 1;
    #####:  384:  state->coins = 0;
    #####:  385:  state->numBuys = 1;
    #####:  386:  state->playedCardCount = 0;
    #####:  387:  state->handCount[state->whoseTurn] = 0;
        -:  388:
        -:  389:  //int k; move to top
        -:  390:  //Next player draws hand
    #####:  391:  for (k = 0; k < 5; k++){
    $$$$$:  391-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  391-block  1
branch  2 never executed
branch  3 never executed
    #####:  392:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  392-block  0
call    0 never executed
        -:  393:  }
        -:  394:
        -:  395:  //Update money
    #####:  396:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  396-block  0
call    0 never executed
        -:  397:
    #####:  398:  return 0;
unconditional  0 never executed
        -:  399:}
        -:  400:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  401:int isGameOver(struct gameState *state) {
    $$$$$:  401-block  0
        -:  402:  int i;
        -:  403:  int j;
        -:  404:	
        -:  405:  //if stack of Province cards is empty, the game ends
    #####:  406:  if (state->supplyCount[province] == 0)
    $$$$$:  406-block  0
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      return 1;
    $$$$$:  408-block  0
unconditional  0 never executed
        -:  409:    }
        -:  410:
        -:  411:  //if three supply pile are at 0, the game ends
    #####:  412:  j = 0;
    #####:  413:  for (i = 0; i < 25; i++)
    $$$$$:  413-block  0
unconditional  0 never executed
    $$$$$:  413-block  1
unconditional  1 never executed
    $$$$$:  413-block  2
branch  2 never executed
branch  3 never executed
        -:  414:    {
    #####:  415:      if (state->supplyCount[i] == 0)
    $$$$$:  415-block  0
branch  0 never executed
branch  1 never executed
        -:  416:	{
    #####:  417:	  j++;
    $$$$$:  417-block  0
unconditional  0 never executed
        -:  418:	}
        -:  419:    }
    #####:  420:  if ( j >= 3)
    $$$$$:  420-block  0
branch  0 never executed
branch  1 never executed
        -:  421:    {
    #####:  422:      return 1;
    $$$$$:  422-block  0
unconditional  0 never executed
        -:  423:    }
        -:  424:
    #####:  425:  return 0;
    $$$$$:  425-block  0
unconditional  0 never executed
        -:  426:}
        -:  427:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  428:int scoreFor (int player, struct gameState *state) {
    $$$$$:  428-block  0
        -:  429:
        -:  430:  int i;
    #####:  431:  int score = 0;
        -:  432:  //score from hand
    #####:  433:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
        -:  454:  //score from deck
    #####:  455:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  455-block  0
unconditional  0 never executed
    $$$$$:  455-block  1
unconditional  1 never executed
    $$$$$:  455-block  2
branch  2 never executed
branch  3 never executed
        -:  456:    {
    #####:  457:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  457-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  457-block  1
unconditional  2 never executed
    #####:  458:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  458-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  458-block  1
unconditional  2 never executed
    #####:  459:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  459-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  459-block  1
unconditional  2 never executed
    #####:  460:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  460-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  460-block  1
unconditional  2 never executed
    #####:  461:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  461-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  461-block  1
unconditional  2 never executed
    #####:  462:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  462-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  462-block  1
call    2 never executed
unconditional  3 never executed
        -:  463:    }
        -:  464:
    #####:  465:  return score;
    $$$$$:  465-block  0
unconditional  0 never executed
        -:  466:}
        -:  467:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  468-block  0
        -:  469:  int i;	
        -:  470:  int j;
        -:  471:  int highScore;
        -:  472:  int currentPlayer;
        -:  473:
        -:  474:  //get score for each player
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  475-block  0
unconditional  0 never executed
    $$$$$:  475-block  1
unconditional  1 never executed
    $$$$$:  475-block  2
branch  2 never executed
branch  3 never executed
        -:  476:    {
        -:  477:      //set unused player scores to -9999
    #####:  478:      if (i >= state->numPlayers)
    $$$$$:  478-block  0
branch  0 never executed
branch  1 never executed
        -:  479:	{
    #####:  480:	  players[i] = -9999;
    $$$$$:  480-block  0
unconditional  0 never executed
        -:  481:	}
        -:  482:      else
        -:  483:	{
    #####:  484:	  players[i] = scoreFor (i, state);
    $$$$$:  484-block  0
call    0 never executed
unconditional  1 never executed
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
unconditional  0 never executed
    $$$$$:  490-block  1
unconditional  1 never executed
    $$$$$:  490-block  2
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if (players[i] > players[j])
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
        -:  493:	{
    #####:  494:	  j = i;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //add 1 to players who had less turns
    #####:  500:  currentPlayer = whoseTurn(state);
    $$$$$:  500-block  0
call    0 never executed
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  501-block  0
unconditional  1 never executed
    $$$$$:  501-block  1
branch  2 never executed
branch  3 never executed
        -:  502:    {
    #####:  503:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  503-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  503-block  1
branch  2 never executed
branch  3 never executed
        -:  504:	{
    #####:  505:	  players[i]++;
    $$$$$:  505-block  0
unconditional  0 never executed
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  //find new highest score
    #####:  510:  j = 0;
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  511-block  0
unconditional  0 never executed
    $$$$$:  511-block  1
unconditional  1 never executed
    $$$$$:  511-block  2
branch  2 never executed
branch  3 never executed
        -:  512:    {
    #####:  513:      if ( players[i] > players[j] )
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  j = i;
    $$$$$:  515-block  0
unconditional  0 never executed
        -:  516:	}
        -:  517:    }
    #####:  518:  highScore = players[j];
        -:  519:
        -:  520:  //set winners in array to 1 and rest to 0
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  521-block  0
unconditional  0 never executed
    $$$$$:  521-block  1
unconditional  1 never executed
    $$$$$:  521-block  2
branch  2 never executed
branch  3 never executed
        -:  522:    {
    #####:  523:      if ( players[i] == highScore )
    $$$$$:  523-block  0
branch  0 never executed
branch  1 never executed
        -:  524:	{
    #####:  525:	  players[i] = 1;
    $$$$$:  525-block  0
unconditional  0 never executed
        -:  526:	}
        -:  527:      else
        -:  528:	{
    #####:  529:	  players[i] = 0;
    $$$$$:  529-block  0
unconditional  0 never executed
        -:  530:	}
        -:  531:    }
        -:  532:
    #####:  533:  return 0;
    $$$$$:  533-block  0
unconditional  0 never executed
        -:  534:}
        -:  535:
function drawCard called 155 returned 100% blocks executed 100%
      155:  536:int drawCard(int player, struct gameState *state)
      155:  536-block  0
        -:  537:{	int count;
        -:  538:  int deckCounter;
      155:  539:  if (state->deckCount[player] <= 0){//Deck is empty
      155:  539-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 137
        -:  540:    
        -:  541:    //Step 1 Shuffle the discard pile back into a deck
        -:  542:    int i;
        -:  543:    //Move discard to deck
       35:  544:    for (i = 0; i < state->discardCount[player];i++){
       18:  544-block  0
unconditional  0 taken 18
       17:  544-block  1
unconditional  1 taken 17
       35:  544-block  2
branch  2 taken 17
branch  3 taken 18 (fallthrough)
       17:  545:      state->deck[player][i] = state->discard[player][i];
       17:  546:      state->discard[player][i] = -1;
        -:  547:    }
        -:  548:
       18:  549:    state->deckCount[player] = state->discardCount[player];
       18:  550:    state->discardCount[player] = 0;//Reset discard
        -:  551:
        -:  552:    //Shufffle the deck
       18:  553:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       18:  553-block  0
call    0 returned 18
        -:  554:   
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  557:    }
        -:  558:    
       18:  559:    state->discardCount[player] = 0;
        -:  560:
        -:  561:    //Step 2 Draw Card
       18:  562:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 18
        -:  563:    
        -:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:    
       18:  568:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  569:
       18:  570:    if (deckCounter == 0)
       18:  570-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 2
       16:  571:      return -1;
       16:  571-block  0
unconditional  0 taken 16
        -:  572:
        2:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  574:    state->deckCount[player]--;
        2:  575:    state->handCount[player]++;//Increment hand count
        2:  575-block  0
unconditional  0 taken 2
        -:  576:  }
        -:  577:
        -:  578:  else{
      137:  579:    int count = state->handCount[player];//Get current hand count for player
      137:  579-block  0
unconditional  0 taken 137
        -:  580:    int deckCounter;
        -:  581:    if (DEBUG){//Debug statements
        -:  582:      printf("Current hand count: %d\n", count);
        -:  583:    }
        -:  584:
      137:  585:    deckCounter = state->deckCount[player];//Create holder for the deck count
      137:  586:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      137:  587:    state->deckCount[player]--;
      137:  588:    state->handCount[player]++;//Increment hand count
      137:  588-block  0
unconditional  0 taken 137
        -:  589:  }
        -:  590:
      139:  591:  return 0;
      139:  591-block  0
unconditional  0 taken 139
        -:  592:}
        -:  593:
function getCost called 0 returned 0% blocks executed 0%
    #####:  594:int getCost(int cardNumber)
    $$$$$:  594-block  0
        -:  595:{
    #####:  596:  switch( cardNumber ) 
    $$$$$:  596-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  597:    {
        -:  598:    case curse:
    #####:  599:      return 0;
    $$$$$:  599-block  0
unconditional  0 never executed
        -:  600:    case estate:
    #####:  601:      return 2;
    $$$$$:  601-block  0
unconditional  0 never executed
        -:  602:    case duchy:
    #####:  603:      return 5;
    $$$$$:  603-block  0
unconditional  0 never executed
        -:  604:    case province:
    #####:  605:      return 8;
    $$$$$:  605-block  0
unconditional  0 never executed
        -:  606:    case copper:
    #####:  607:      return 0;
    $$$$$:  607-block  0
unconditional  0 never executed
        -:  608:    case silver:
    #####:  609:      return 3;
    $$$$$:  609-block  0
unconditional  0 never executed
        -:  610:    case gold:
    #####:  611:      return 6;
    $$$$$:  611-block  0
unconditional  0 never executed
        -:  612:    case adventurer:
    #####:  613:      return 6;
    $$$$$:  613-block  0
unconditional  0 never executed
        -:  614:    case council_room:
    #####:  615:      return 5;
    $$$$$:  615-block  0
unconditional  0 never executed
        -:  616:    case feast:
    #####:  617:      return 4;
    $$$$$:  617-block  0
unconditional  0 never executed
        -:  618:    case gardens:
    #####:  619:      return 4;
    $$$$$:  619-block  0
unconditional  0 never executed
        -:  620:    case mine:
    #####:  621:      return 5;
    $$$$$:  621-block  0
unconditional  0 never executed
        -:  622:    case remodel:
    #####:  623:      return 4;
    $$$$$:  623-block  0
unconditional  0 never executed
        -:  624:    case smithy:
    #####:  625:      return 4;
    $$$$$:  625-block  0
unconditional  0 never executed
        -:  626:    case village:
    #####:  627:      return 3;
    $$$$$:  627-block  0
unconditional  0 never executed
        -:  628:    case baron:
    #####:  629:      return 4;
    $$$$$:  629-block  0
unconditional  0 never executed
        -:  630:    case great_hall:
    #####:  631:      return 3;
    $$$$$:  631-block  0
unconditional  0 never executed
        -:  632:    case minion:
    #####:  633:      return 5;
    $$$$$:  633-block  0
unconditional  0 never executed
        -:  634:    case steward:
    #####:  635:      return 3;
    $$$$$:  635-block  0
unconditional  0 never executed
        -:  636:    case tribute:
    #####:  637:      return 5;
    $$$$$:  637-block  0
unconditional  0 never executed
        -:  638:    case ambassador:
    #####:  639:      return 3;
    $$$$$:  639-block  0
unconditional  0 never executed
        -:  640:    case cutpurse:
    #####:  641:      return 4;
    $$$$$:  641-block  0
unconditional  0 never executed
        -:  642:    case embargo: 
    #####:  643:      return 2;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:    case outpost:
    #####:  645:      return 5;
    $$$$$:  645-block  0
unconditional  0 never executed
        -:  646:    case salvager:
    #####:  647:      return 4;
    $$$$$:  647-block  0
unconditional  0 never executed
        -:  648:    case sea_hag:
    #####:  649:      return 4;
    $$$$$:  649-block  0
unconditional  0 never executed
        -:  650:    case treasure_map:
    #####:  651:      return 4;
    $$$$$:  651-block  0
unconditional  0 never executed
        -:  652:    }
        -:  653:	
    #####:  654:  return -1;
    $$$$$:  654-block  0
unconditional  0 never executed
        -:  655:}
        -:  656:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  657:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
    $$$$$:  657-block  0
        -:  658:	//******BUG******
    #####:  659:	for (int i = 0; i < 4; i++)
    $$$$$:  659-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  659-block  1
branch  2 never executed
branch  3 never executed
        -:  660:	{
    #####:  661:		drawCard(currentPlayer, state);
    $$$$$:  661-block  0
call    0 never executed
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
    #####:  665:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  665-block  0
call    0 never executed
    #####:  666:	return 0;
unconditional  0 never executed
        -:  667:}
        -:  668:
function adventurerEffect called 20 returned 100% blocks executed 100%
       20:  669:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state,  int temphand[]) {
       20:  669-block  0
        -:  670:
        -:  671:	//******BUG******
        -:  672:	int z;
        -:  673:	int cardDrawn;
      100:  674:	while (drawntreasure<2) {
       20:  674-block  0
unconditional  0 taken 20
      100:  674-block  1
branch  1 taken 80
branch  2 taken 20 (fallthrough)
       80:  675:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
       80:  675-block  0
branch  0 taken 18 (fallthrough)
branch  1 taken 62
       18:  676:			shuffle(currentPlayer, state);
       18:  676-block  0
call    0 returned 18
unconditional  1 taken 18
        -:  677:		}
       80:  678:		drawCard(currentPlayer, state);
       80:  678-block  0
call    0 returned 80
       80:  679:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       80:  680:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 40 (fallthrough)
branch  1 taken 40
       40:  680-block  0
branch  2 taken 40 (fallthrough)
branch  3 taken 0
       40:  680-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 40
       40:  681:			drawntreasure++;
       40:  681-block  0
unconditional  0 taken 40
        -:  682:		else {
       40:  683:			temphand[z] = cardDrawn;
       40:  684:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       40:  685:			z++;
       40:  685-block  0
unconditional  0 taken 40
        -:  686:		}
        -:  687:	}
      200:  688:	while (z - 1 >= 0) {
       20:  688-block  0
unconditional  0 taken 20
      200:  688-block  1
branch  1 taken 180
branch  2 taken 20 (fallthrough)
      180:  689:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      180:  690:		z = z - 1;
      180:  690-block  0
unconditional  0 taken 180
        -:  691:	}
       20:  692:	return 0;
       20:  692-block  0
unconditional  0 taken 20
        -:  693:}
        -:  694:
function stewardEffect called 0 returned 0% blocks executed 0%
    #####:  695:int stewardEffect(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos) {
    $$$$$:  695-block  0
    #####:  696:	if (choice1 == 1)
    $$$$$:  696-block  0
branch  0 never executed
branch  1 never executed
        -:  697:	{
        -:  698:		//+2 cards
    #####:  699:		drawCard(currentPlayer, state);
    $$$$$:  699-block  0
call    0 never executed
    #####:  700:		drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  701:	}
    #####:  702:	else if (choice1 == 2)
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
        -:  703:	{
        -:  704:		//+2 coins
    #####:  705:		state->coins = state->coins + 2;
    $$$$$:  705-block  0
unconditional  0 never executed
        -:  706:	}
        -:  707:	else
        -:  708:	{
        -:  709:		//trash 2 cards in hand
        -:  710:		//******BUG******
    #####:  711:		discardCard(choice1, currentPlayer, state, 1);
    $$$$$:  711-block  0
call    0 never executed
    #####:  712:		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  713:	}
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  716-block  0
call    0 never executed
    #####:  717:	return 0;
unconditional  0 never executed
        -:  718:}
        -:  719:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  720:int cutpurseEffect(int currentPlayer, struct gameState * state, int handPos) {
    $$$$$:  720-block  0
    #####:  721:	updateCoins(currentPlayer, state, 2);
    $$$$$:  721-block  0
call    0 never executed
        -:  722:	int i;
        -:  723:	int j;
        -:  724:	int k;
    #####:  725:	for ( i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$:  725-block  0
unconditional  1 never executed
    $$$$$:  725-block  1
branch  2 never executed
branch  3 never executed
        -:  726:	{
    #####:  727:		if (i != currentPlayer)
    $$$$$:  727-block  0
branch  0 never executed
branch  1 never executed
        -:  728:		{	//******BUG******
    #####:  729:			for ( j = 0; j <= state->handCount[i]; j++)
    $$$$$:  729-block  0
unconditional  0 never executed
    $$$$$:  729-block  1
unconditional  1 never executed
    $$$$$:  729-block  2
branch  2 never executed
branch  3 never executed
        -:  730:			{
    #####:  731:				if (state->hand[i][j] == copper)
    $$$$$:  731-block  0
branch  0 never executed
branch  1 never executed
        -:  732:				{
    #####:  733:					discardCard(j, i, state, 0);
    $$$$$:  733-block  0
call    0 never executed
    #####:  734:					break;
unconditional  0 never executed
        -:  735:				}
    #####:  736:				if (j == state->handCount[i])
    $$$$$:  736-block  0
branch  0 never executed
branch  1 never executed
        -:  737:				{
    #####:  738:					for ( k = 0; k < state->handCount[i]; k++)
    $$$$$:  738-block  0
unconditional  0 never executed
    $$$$$:  738-block  1
unconditional  1 never executed
    $$$$$:  738-block  2
branch  2 never executed
branch  3 never executed
        -:  739:					{
        -:  740:						if (DEBUG)
        -:  741:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  742:					}
    #####:  743:					break;
    $$$$$:  743-block  0
unconditional  0 never executed
        -:  744:				}
        -:  745:			}
        -:  746:
        -:  747:		}
        -:  748:
        -:  749:	}
        -:  750:
        -:  751:	//discard played card from hand
    #####:  752:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  752-block  0
call    0 never executed
        -:  753:
    #####:  754:	return 0;
unconditional  0 never executed
        -:  755:}
        -:  756:
function ambassadorEffect called 0 returned 0% blocks executed 0%
    #####:  757:int ambassadorEffect(int choice1, int choice2, struct gameState * state, int currentPlayer, int handPos) {
    $$$$$:  757-block  0
    #####:  758:	int j = 0;		//used to check if player has enough cards to discard
        -:  759:
    #####:  760:	if (choice2 > 2 || choice2 < 0)
    $$$$$:  760-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  760-block  1
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:		return -1;
    $$$$$:  762-block  0
unconditional  0 never executed
        -:  763:	}
        -:  764:
    #####:  765:	if (choice1 == handPos)
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		return -1;
    $$$$$:  767-block  0
unconditional  0 never executed
        -:  768:	}
        -:  769:
    #####:  770:	for (int i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  770-block  0
unconditional  0 never executed
    $$$$$:  770-block  1
unconditional  1 never executed
    $$$$$:  770-block  2
branch  2 never executed
branch  3 never executed
        -:  771:	{	
    #####:  772:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$:  772-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  772-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  772-block  2
branch  4 never executed
branch  5 never executed
        -:  773:		{
    #####:  774:			j++;
    $$$$$:  774-block  0
unconditional  0 never executed
        -:  775:		}
        -:  776:	}
    #####:  777:	if (j < choice2)
    $$$$$:  777-block  0
branch  0 never executed
branch  1 never executed
        -:  778:	{
    #####:  779:		return -1;
    $$$$$:  779-block  0
unconditional  0 never executed
        -:  780:	}
        -:  781:
        -:  782:	if (DEBUG)
        -:  783:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  784:
        -:  785:	//increase supply count for choosen card by amount being discarded
    #####:  786:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  787:
        -:  788:	//each other player gains a copy of revealed card
    #####:  789:	for (int i = 0; i < state->numPlayers; i++)
    $$$$$:  789-block  0
unconditional  0 never executed
    $$$$$:  789-block  1
unconditional  1 never executed
    $$$$$:  789-block  2
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:		if (i != currentPlayer)
    $$$$$:  791-block  0
branch  0 never executed
branch  1 never executed
        -:  792:		{
    #####:  793:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$:  793-block  0
call    0 never executed
unconditional  1 never executed
        -:  794:		}
        -:  795:	}
        -:  796:
        -:  797:	//discard played card from hand
    #####:  798:	discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  798-block  0
call    0 never executed
        -:  799:
        -:  800:	//trash copies of cards returned to supply
    #####:  801:	for (int j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$:  801-block  0
unconditional  1 never executed
    $$$$$:  801-block  1
branch  2 never executed
branch  3 never executed
        -:  802:	{
    #####:  803:		for (int i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  803-block  0
unconditional  0 never executed
    $$$$$:  803-block  1
unconditional  1 never executed
    $$$$$:  803-block  2
branch  2 never executed
branch  3 never executed
        -:  804:		{
    #####:  805:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$:  805-block  0
branch  0 never executed
branch  1 never executed
        -:  806:			{
    #####:  807:				discardCard(i, currentPlayer, state, 1);
    $$$$$:  807-block  0
call    0 never executed
    #####:  808:				break;
unconditional  0 never executed
        -:  809:			}
        -:  810:		}
        -:  811:	}
        -:  812:
    #####:  813:	return 0;
    $$$$$:  813-block  0
unconditional  0 never executed
        -:  814:}
        -:  815:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  816-block  0
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  //int k;
        -:  821:  int x;
        -:  822:  int index;
    #####:  823:  int currentPlayer = whoseTurn(state);
    $$$$$:  823-block  0
call    0 never executed
    #####:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
    #####:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
    #####:  828:  int drawntreasure=0;
        -:  829:
        -:  830:  //int z = 0;// this is the counter for the temp hand
    #####:  831:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  832:    nextPlayer = 0;
    $$$$$:  832-block  0
unconditional  0 never executed
        -:  833:  }
        -:  834:  
        -:  835:	
        -:  836:  //uses switch to select card and perform actions
    #####:  837:  switch(card) 
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  838:    {
        -:  839:    case adventurer:
    #####:  840:		return adventurerEffect( drawntreasure, currentPlayer,state, temphand);
    $$$$$:  840-block  0
call    0 never executed
unconditional  1 never executed
        -:  841:			
        -:  842:    case council_room:
        -:  843:      //+4 Cards
    #####:  844:      for (i = 0; i < 4; i++)
    $$$$$:  844-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  844-block  1
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  drawCard(currentPlayer, state);
    $$$$$:  846-block  0
call    0 never executed
        -:  847:	}
        -:  848:			
        -:  849:      //+1 Buy
    #####:  850:      state->numBuys++;
        -:  851:			
        -:  852:      //Each other player draws a card
    #####:  853:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  853-block  0
unconditional  0 never executed
    $$$$$:  853-block  1
unconditional  1 never executed
    $$$$$:  853-block  2
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  if ( i != currentPlayer )
    $$$$$:  855-block  0
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      drawCard(i, state);
    $$$$$:  857-block  0
call    0 never executed
unconditional  1 never executed
        -:  858:	    }
        -:  859:	}
        -:  860:			
        -:  861:      //put played card in played card pile
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  862-block  0
call    0 never executed
        -:  863:			
    #####:  864:      return 0;
unconditional  0 never executed
        -:  865:			
        -:  866:    case feast:
        -:  867:      //gain card with cost up to 5
        -:  868:      //Backup hand
    #####:  869:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  869-block  0
unconditional  0 never executed
    $$$$$:  869-block  1
unconditional  1 never executed
    $$$$$:  869-block  2
branch  2 never executed
branch  3 never executed
    #####:  870:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  871:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  872:      }
        -:  873:      //Backup hand
        -:  874:
        -:  875:      //Update Coins for Buy
    #####:  876:      updateCoins(currentPlayer, state, 5);
    $$$$$:  876-block  0
call    0 never executed
    #####:  877:      x = 1;//Condition to loop on
    #####:  878:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  878-block  0
branch  1 never executed
branch  2 never executed
    #####:  879:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	  if (DEBUG)
        -:  881:	    printf("None of that card left, sorry!\n");
        -:  882:
        -:  883:	  if (DEBUG){
        -:  884:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  885:	  }
        -:  886:	}
    #####:  887:	else if (state->coins < getCost(choice1)){
    $$$$$:  887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  888:	  printf("That card is too expensive!\n");
    $$$$$:  888-block  0
call    0 never executed
unconditional  1 never executed
        -:  889:
        -:  890:	  if (DEBUG){
        -:  891:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  892:	  }
        -:  893:	}
        -:  894:	else{
        -:  895:
        -:  896:	  if (DEBUG){
        -:  897:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  898:	  }
        -:  899:
    #####:  900:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  900-block  0
call    0 never executed
    #####:  901:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  902:
        -:  903:	  if (DEBUG){
        -:  904:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  905:	  }
        -:  906:
        -:  907:	}
        -:  908:      }     
        -:  909:
        -:  910:      //Reset Hand
    #####:  911:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  911-block  0
unconditional  0 never executed
    $$$$$:  911-block  1
unconditional  1 never executed
    $$$$$:  911-block  2
branch  2 never executed
branch  3 never executed
    #####:  912:	state->hand[currentPlayer][i] = temphand[i];
    #####:  913:	temphand[i] = -1;
        -:  914:      }
        -:  915:      //Reset Hand
        -:  916:      			
    #####:  917:      return 0;
    $$$$$:  917-block  0
unconditional  0 never executed
        -:  918:			
        -:  919:    case gardens:
    #####:  920:      return -1;
    $$$$$:  920-block  0
unconditional  0 never executed
        -:  921:			
        -:  922:    case mine:
    #####:  923:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  924:
    #####:  925:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  925-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  925-block  1
branch  2 never executed
branch  3 never executed
        -:  926:	{
    #####:  927:	  return -1;
    $$$$$:  927-block  0
unconditional  0 never executed
        -:  928:	}
        -:  929:		
    #####:  930:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  930-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  930-block  1
branch  2 never executed
branch  3 never executed
        -:  931:	{
    #####:  932:	  return -1;
    $$$$$:  932-block  0
unconditional  0 never executed
        -:  933:	}
        -:  934:
    #####:  935:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  935-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  936:	{
    #####:  937:	  return -1;
    $$$$$:  937-block  0
unconditional  0 never executed
        -:  938:	}
        -:  939:
    #####:  940:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  940-block  0
call    0 never executed
        -:  941:
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  944:
        -:  945:      //discard trashed card
    #####:  946:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  946-block  0
unconditional  1 never executed
    $$$$$:  946-block  1
branch  2 never executed
branch  3 never executed
        -:  947:	{
    #####:  948:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  950-block  0
call    0 never executed
    #####:  951:	      break;
unconditional  0 never executed
        -:  952:	    }
        -:  953:	}
        -:  954:			
    #####:  955:      return 0;
    $$$$$:  955-block  0
unconditional  0 never executed
        -:  956:			
        -:  957:    case remodel:
    #####:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
    #####:  960:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  960-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  961:	{
    #####:  962:	  return -1;
    $$$$$:  962-block  0
unconditional  0 never executed
        -:  963:	}
        -:  964:
    #####:  965:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  965-block  0
call    0 never executed
        -:  966:
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  969:
        -:  970:      //discard trashed card
    #####:  971:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  971-block  0
unconditional  1 never executed
    $$$$$:  971-block  1
branch  2 never executed
branch  3 never executed
        -:  972:	{
    #####:  973:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  973-block  0
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  975-block  0
call    0 never executed
    #####:  976:	      break;
unconditional  0 never executed
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:
    #####:  981:      return 0;
    $$$$$:  981-block  0
unconditional  0 never executed
        -:  982:		
        -:  983:    case smithy:
        -:  984:      //+3 Cards
    #####:  985:		return smithyEffect(currentPlayer,state,handPos);
    $$$$$:  985-block  0
call    0 never executed
unconditional  1 never executed
        -:  986:		
        -:  987:    case village:
        -:  988:      //+1 Card
    #####:  989:      drawCard(currentPlayer, state);
    $$$$$:  989-block  0
call    0 never executed
        -:  990:			
        -:  991:      //+2 Actions
    #####:  992:      state->numActions = state->numActions + 2;
        -:  993:			
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  996:      return 0;
unconditional  0 never executed
        -:  997:		
        -:  998:    case baron:
    #####:  999:      state->numBuys++;//Increase buys by 1!
    #####: 1000:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$: 1000-block  0
branch  0 never executed
branch  1 never executed
    #####: 1001:	int p = 0;//Iterator for hand!
    #####: 1002:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1003:	while(card_not_discarded){
    $$$$$: 1003-block  0
unconditional  0 never executed
    $$$$$: 1003-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1003-block  2
unconditional  3 never executed
    #####: 1004:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$: 1004-block  0
branch  0 never executed
branch  1 never executed
    #####: 1005:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1006:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1007:	    state->discardCount[currentPlayer]++;
    #####: 1008:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$: 1008-block  0
unconditional  0 never executed
    $$$$$: 1008-block  1
unconditional  1 never executed
    $$$$$: 1008-block  2
branch  2 never executed
branch  3 never executed
    #####: 1009:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1010:	    }
    #####: 1011:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1012:	    state->handCount[currentPlayer]--;
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
    $$$$$: 1013-block  0
unconditional  0 never executed
        -: 1014:	  }
    #####: 1015:	  else if (p > state->handCount[currentPlayer]){
    $$$$$: 1015-block  0
branch  0 never executed
branch  1 never executed
        -: 1016:	    if(DEBUG) {
        -: 1017:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1018:	      printf("Must gain an estate if there are any\n");
        -: 1019:	    }
    #####: 1020:	    if (supplyCount(estate, state) > 0){
    $$$$$: 1020-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1023:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:		isGameOver(state);
    $$$$$: 1024-block  0
call    0 never executed
unconditional  1 never executed
        -: 1025:	      }
        -: 1026:	    }
    #####: 1027:	    card_not_discarded = 0;//Exit the loop
    $$$$$: 1027-block  0
unconditional  0 never executed
        -: 1028:	  }
        -: 1029:			    
        -: 1030:	  else{
    #####: 1031:	    p++;//Next card
    $$$$$: 1031-block  0
unconditional  0 never executed
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:			    
        -: 1036:      else{
    #####: 1037:	if (supplyCount(estate, state) > 0){
    $$$$$: 1037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1038:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$: 1038-block  0
call    0 never executed
    #####: 1039:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1040:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:	    isGameOver(state);
    $$$$$: 1041-block  0
call    0 never executed
unconditional  1 never executed
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      
    #####: 1047:      return 0;
    $$$$$: 1047-block  0
unconditional  0 never executed
        -: 1048:		
        -: 1049:    case great_hall:
        -: 1050:      //+1 Card
    #####: 1051:      drawCard(currentPlayer, state);
    $$$$$: 1051-block  0
call    0 never executed
        -: 1052:			
        -: 1053:      //+1 Actions
    #####: 1054:      state->numActions++;
        -: 1055:			
        -: 1056:      //discard card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1058:      return 0;
unconditional  0 never executed
        -: 1059:		
        -: 1060:    case minion:
        -: 1061:      //+1 action
    #####: 1062:      state->numActions++;
        -: 1063:			
        -: 1064:      //discard card from hand
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1065-block  0
call    0 never executed
        -: 1066:			
    #####: 1067:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1068:	{
    #####: 1069:	  state->coins = state->coins + 2;
    $$$$$: 1069-block  0
unconditional  0 never executed
        -: 1070:	}
        -: 1071:			
    #####: 1072:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$: 1072-block  0
branch  0 never executed
branch  1 never executed
        -: 1073:	{
        -: 1074:	  //discard hand
    #####: 1075:	  while(numHandCards(state) > 0)
    $$$$$: 1075-block  0
unconditional  0 never executed
    $$$$$: 1075-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1076:	    {
    #####: 1077:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1077-block  0
call    0 never executed
unconditional  1 never executed
        -: 1078:	    }
        -: 1079:				
        -: 1080:	  //draw 4
    #####: 1081:	  for (i = 0; i < 4; i++)
    $$$$$: 1081-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1081-block  1
branch  2 never executed
branch  3 never executed
        -: 1082:	    {
    #####: 1083:	      drawCard(currentPlayer, state);
    $$$$$: 1083-block  0
call    0 never executed
        -: 1084:	    }
        -: 1085:				
        -: 1086:	  //other players discard hand and redraw if hand size > 4
    #####: 1087:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1087-block  0
unconditional  0 never executed
    $$$$$: 1087-block  1
unconditional  1 never executed
    $$$$$: 1087-block  2
branch  2 never executed
branch  3 never executed
        -: 1088:	    {
    #####: 1089:	      if (i != currentPlayer)
    $$$$$: 1089-block  0
branch  0 never executed
branch  1 never executed
        -: 1090:		{
    #####: 1091:		  if ( state->handCount[i] > 4 )
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
        -: 1092:		    {
        -: 1093:		      //discard hand
    #####: 1094:		      while( state->handCount[i] > 0 )
    $$$$$: 1094-block  0
unconditional  0 never executed
    $$$$$: 1094-block  1
branch  1 never executed
branch  2 never executed
        -: 1095:			{
    #####: 1096:			  discardCard(handPos, i, state, 0);
    $$$$$: 1096-block  0
call    0 never executed
unconditional  1 never executed
        -: 1097:			}
        -: 1098:							
        -: 1099:		      //draw 4
    #####: 1100:		      for (j = 0; j < 4; j++)
    $$$$$: 1100-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1100-block  1
branch  2 never executed
branch  3 never executed
        -: 1101:			{
    #####: 1102:			  drawCard(i, state);
    $$$$$: 1102-block  0
call    0 never executed
        -: 1103:			}
        -: 1104:		    }
        -: 1105:		}
        -: 1106:	    }
        -: 1107:				
        -: 1108:	}
    #####: 1109:      return 0;
    $$$$$: 1109-block  0
unconditional  0 never executed
        -: 1110:		
        -: 1111:    case steward:
    #####: 1112:		return stewardEffect( choice1, choice2,  choice3,  currentPlayer, state,  handPos);
    $$$$$: 1112-block  0
call    0 never executed
unconditional  1 never executed
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1115-block  0
branch  0 never executed
branch  1 never executed
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1116-block  0
branch  0 never executed
branch  1 never executed
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
    $$$$$: 1118-block  0
unconditional  0 never executed
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1120-block  0
branch  0 never executed
branch  1 never executed
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
    $$$$$: 1122-block  0
unconditional  0 never executed
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1134-block  0
unconditional  0 never executed
    $$$$$: 1134-block  1
unconditional  1 never executed
    $$$$$: 1134-block  2
branch  2 never executed
branch  3 never executed
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1141-block  0
call    0 never executed
unconditional  1 never executed
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
    $$$$$: 1148-block  0
unconditional  0 never executed
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
    $$$$$: 1154-block  0
unconditional  0 never executed
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
    $$$$$: 1157-block  0
unconditional  0 never executed
    $$$$$: 1157-block  1
unconditional  1 never executed
    $$$$$: 1157-block  2
branch  2 never executed
branch  3 never executed
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1158-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1158-block  2
branch  4 never executed
branch  5 never executed
    #####: 1159:	  state->coins += 2;
    $$$$$: 1159-block  0
unconditional  0 never executed
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1162-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1162-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1162-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1162-block  4
branch  8 never executed
branch  9 never executed
    #####: 1163:	  drawCard(currentPlayer, state);
    $$$$$: 1163-block  0
call    0 never executed
    #####: 1164:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
    $$$$$: 1167-block  0
unconditional  0 never executed
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
    $$$$$: 1171-block  0
unconditional  0 never executed
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:		return ambassadorEffect(choice1, choice2, state, currentPlayer, handPos);
    $$$$$: 1174-block  0
call    0 never executed
unconditional  1 never executed
        -: 1175:		
        -: 1176:    case cutpurse:
    #####: 1177:		return cutpurseEffect(currentPlayer, state,handPos);
    $$$$$: 1177-block  0
call    0 never executed
unconditional  1 never executed
        -: 1178:
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
unconditional  0 never executed
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
unconditional  0 never executed
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
unconditional  0 never executed
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
unconditional  0 never executed
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
unconditional  0 never executed
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
unconditional  0 never executed
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
unconditional  0 never executed
    $$$$$: 1235-block  1
unconditional  1 never executed
    $$$$$: 1235-block  2
branch  2 never executed
branch  3 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
unconditional  0 never executed
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1250-block  0
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
unconditional  0 never executed
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
unconditional  0 never executed
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
    $$$$$: 1263-block  0
unconditional  0 never executed
    $$$$$: 1263-block  1
unconditional  1 never executed
        -: 1264:}
        -: 1265:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    $$$$$: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    #####: 1270:  if (trashFlag < 1)
    $$$$$: 1270-block  0
branch  0 never executed
branch  1 never executed
        -: 1271:    {
        -: 1272:      //add card to played pile
    #####: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1274:      state->playedCardCount++;
    $$$$$: 1274-block  0
unconditional  0 never executed
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    #####: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    #####: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    $$$$$: 1281-block  0
branch  0 never executed
branch  1 never executed
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
unconditional  0 never executed
        -: 1285:    }
    #####: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    $$$$$: 1286-block  0
branch  0 never executed
branch  1 never executed
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
unconditional  0 never executed
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    #####: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    #####: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
    $$$$$: 1298-block  0
unconditional  0 never executed
        -: 1299:    }
        -: 1300:	
    #####: 1301:  return 0;
    $$$$$: 1301-block  0
unconditional  0 never executed
        -: 1302:}
        -: 1303:
        -: 1304://unit test
        -: 1305://check supply 
        -: 1306://check to Flag
        -: 1307://check what card
        -: 1308:
function gainCard called 20 returned 100% blocks executed 70%
       20: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       20: 1309-block  0
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:	
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1314:  if ( supplyCount(supplyPos, state) < 1 )
       20: 1314-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
        -: 1315:    {
    #####: 1316:      return -1;
    $$$$$: 1316-block  0
unconditional  0 never executed
        -: 1317:    }
        -: 1318:	
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
       20: 1324:  if (toFlag == 1)
       20: 1324-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 1325:    {
    #####: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1327:      state->deckCount[player]++;
    $$$$$: 1327-block  0
unconditional  0 never executed
        -: 1328:    }
       20: 1329:  else if (toFlag == 2)
       20: 1329-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 0
        -: 1330:    {
       20: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       20: 1332:      state->handCount[player]++;
       20: 1332-block  0
unconditional  0 taken 20
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
    #####: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1337:      state->discardCount[player]++;
    $$$$$: 1337-block  0
unconditional  0 never executed
        -: 1338:    }
        -: 1339:	
        -: 1340:  //decrease number in supply pile
       20: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:	 
       20: 1343:  return 0;
       20: 1343-block  0
unconditional  0 taken 20
        -: 1344:}
        -: 1345:
function updateCoins called 15 returned 100% blocks executed 82%
       15: 1346:int updateCoins(int player, struct gameState *state, int bonus)
       15: 1346-block  0
        -: 1347:{
        -: 1348:  int i;
        -: 1349:	
        -: 1350:  //reset coin count
       15: 1351:  state->coins = 0;
        -: 1352:  //add coins for each Treasure card in player's hand
       90: 1353:  for (i = 0; i < state->handCount[player]; i++)
       15: 1353-block  0
unconditional  0 taken 15
       75: 1353-block  1
unconditional  1 taken 75
       90: 1353-block  2
branch  2 taken 75
branch  3 taken 15 (fallthrough)
        -: 1354:    {
       75: 1355:		  if (state->hand[player][i] == copper)
       75: 1355-block  0
branch  0 taken 60 (fallthrough)
branch  1 taken 15
        -: 1356:		{
       60: 1357:		  state->coins += 1;
       60: 1357-block  0
unconditional  0 taken 60
        -: 1358:		}
       15: 1359:		  else if (state->hand[player][i] == silver)
       15: 1359-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -: 1360:		{
    #####: 1361:		  state->coins += 2;
    $$$$$: 1361-block  0
unconditional  0 never executed
        -: 1362:		}
       15: 1363:		  else if (state->hand[player][i] == gold)
       15: 1363-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -: 1364:		{
    #####: 1365:		  state->coins += 3;
    $$$$$: 1365-block  0
unconditional  0 never executed
        -: 1366:		}	
        -: 1367:    }	
        -: 1368:  //add bonus
       15: 1369:  state->coins += bonus;
       15: 1370:  return 0;
       15: 1370-block  0
unconditional  0 taken 15
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
