        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function assertBool called 0 returned 0% blocks executed 0%
    #####:    8:void assertBool(int a, int b) {
    #####:    9:	if (a == b) {
branch  0 never executed
branch  1 never executed
    #####:   10:		printf(" TEST SUCCESS\n");
call    0 never executed
        -:   11:	}
        -:   12:	else {
    #####:   13:		printf(" TEST FAILURE\n");
call    0 never executed
        -:   14:	}
    #####:   15:}
        -:   16:
function compare called 3720 returned 100% blocks executed 83%
     3720:   17:int compare(const void* a, const void* b) {
     3720:   18:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   19:    return 1;
     3720:   20:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      992:   21:    return -1;
     2728:   22:  return 0;
        -:   23:}
        -:   24:
function newGame called 0 returned 0% blocks executed 0%
    #####:   25:struct gameState* newGame() {
    #####:   26:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   27:  return g;
        -:   28:}
        -:   29:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:		  int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
function initializeGame called 118 returned 100% blocks executed 95%
      118:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:		   struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;			
        -:   52:  //set up random number generator
      118:   53:  SelectStream(1);
call    0 returned 100%
      118:   54:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   55:  
        -:   56:  //check number of players
      118:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      118:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     1298:   66:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   67:    {
    12980:   68:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   69:        {
    11800:   70:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   71:	    {
    #####:   72:	      return -1;
        -:   73:	    }
        -:   74:        }
        -:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      118:   82:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   83:    {
      110:   84:      state->supplyCount[curse] = 10;
        -:   85:    }
        8:   86:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   87:    {
        4:   88:      state->supplyCount[curse] = 20;
        -:   89:    }
        -:   90:  else
        -:   91:    {
        4:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      118:   96:  if (numPlayers == 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   97:    {
      110:   98:      state->supplyCount[estate] = 8;
      110:   99:      state->supplyCount[duchy] = 8;
      110:  100:      state->supplyCount[province] = 8;
        -:  101:    }
        -:  102:  else
        -:  103:    {
        8:  104:      state->supplyCount[estate] = 12;
        8:  105:      state->supplyCount[duchy] = 12;
        8:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      118:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      118:  111:  state->supplyCount[silver] = 40;
      118:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     2478:  115:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  116:    {
    19470:  117:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  118:	{
    18290:  119:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  120:	    {
        -:  121:	      //check if card is a 'Victory' Kingdom card
     1180:  122:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  123:		{
      236:  124:		  if (numPlayers == 2){ 
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      110:  125:		    state->supplyCount[i] = 8; 
        -:  126:		  }
        8:  127:		  else{ state->supplyCount[i] = 12; }
        -:  128:		}
        -:  129:	      else
        -:  130:		{
     1062:  131:		  state->supplyCount[i] = 10;
        -:  132:		}
     1180:  133:	      break;
        -:  134:	    }
        -:  135:	  else    //card is not in the set choosen for the game
        -:  136:	    {
    17110:  137:	      state->supplyCount[i] = -1;
        -:  138:	    }
        -:  139:	}
        -:  140:
        -:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      366:  147:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  148:    {
      248:  149:      state->deckCount[i] = 0;
      992:  150:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  151:	{
      744:  152:	  state->deck[i][j] = estate;
      744:  153:	  state->deckCount[i]++;
        -:  154:	}
     1984:  155:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  156:	{
     1736:  157:	  state->deck[i][j] = copper;
     1736:  158:	  state->deckCount[i]++;		
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      366:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  164:    {
      248:  165:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  166:	{
    #####:  167:	  return -1;
        -:  168:	}
        -:  169:    }
        -:  170:
        -:  171:  //draw player hands
      366:  172:  for (i = 0; i < numPlayers; i++)
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      248:  175:      state->handCount[i] = 0;
      248:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //	{
        -:  180:      //	  drawCard(i, state);
        -:  181:      //	}
        -:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     3304:  185:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  186:    {
     3186:  187:      state->embargoTokens[i] = 0;
        -:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      118:  191:  state->outpostPlayed = 0;
      118:  192:  state->phase = 0;
      118:  193:  state->numActions = 1;
      118:  194:  state->numBuys = 1;
      118:  195:  state->playedCardCount = 0;
      118:  196:  state->whoseTurn = 0;
      118:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
      708:  201:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      590:  202:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  203:  }
        -:  204:
      118:  205:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  206:
      118:  207:  return 0;
        -:  208:}
        -:  209:
function shuffle called 248 returned 100% blocks executed 94%
      248:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      248:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      248:  218:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  219:    return -1;
      248:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     2976:  223:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2480:  224:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2480:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2480:  226:    newDeckPos++;
     8676:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     6196:  228:      state->deck[player][i] = state->deck[player][i+1];
        -:  229:    }
     2480:  230:    state->deckCount[player]--;
        -:  231:  }
     2728:  232:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2480:  233:    state->deck[player][i] = newDeck[i];
     2480:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
      248:  237:  return 0;
        -:  238:}
        -:  239:
function playCard called 0 returned 0% blocks executed 0%
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
call    0 never executed
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  277:	
    #####:  278:  return 0;
        -:  279:}
        -:  280:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
        -:  318:}
        -:  319:
function numHandCards called 24 returned 100% blocks executed 100%
       24:  320:int numHandCards(struct gameState *state) {
       24:  321:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  322:}
        -:  323:
function handCard called 0 returned 0% blocks executed 0%
    #####:  324:int handCard(int handPos, struct gameState *state) {
    #####:  325:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  326:  return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
function supplyCount called 3316 returned 100% blocks executed 100%
     3316:  329:int supplyCount(int card, struct gameState *state) {
     3316:  330:  return state->supplyCount[card];
        -:  331:}
        -:  332:
        -:  333://returns count of the deck
        -:  334:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
function whoseTurn called 118 returned 100% blocks executed 100%
      118:  357:int whoseTurn(struct gameState *state) {
      118:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
function endTurn called 48 returned 100% blocks executed 100%
       48:  361:int endTurn(struct gameState *state) {
        -:  362:  int k;
        -:  363:  int i;
       48:  364:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  365:  
        -:  366:  //Discard hand
      288:  367:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      240:  368:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      240:  369:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  370:  }
       48:  371:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  372:    
        -:  373:  //Code for determining the player
       48:  374:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       36:  375:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  376:  }
        -:  377:  else{
       12:  378:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  379:  }
        -:  380:
       48:  381:  state->outpostPlayed = 0;
       48:  382:  state->phase = 0;
       48:  383:  state->numActions = 1;
       48:  384:  state->coins = 0;
       48:  385:  state->numBuys = 1;
       48:  386:  state->playedCardCount = 0;
       48:  387:  state->handCount[state->whoseTurn] = 0;
        -:  388:
        -:  389:  //int k; move to top
        -:  390:  //Next player draws hand
      288:  391:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      240:  392:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  393:  }
        -:  394:
        -:  395:  //Update money
       48:  396:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  397:
       48:  398:  return 0;
        -:  399:}
        -:  400:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  401:int isGameOver(struct gameState *state) {
        -:  402:  int i;
        -:  403:  int j;
        -:  404:	
        -:  405:  //if stack of Province cards is empty, the game ends
    #####:  406:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      return 1;
        -:  409:    }
        -:  410:
        -:  411:  //if three supply pile are at 0, the game ends
    #####:  412:  j = 0;
    #####:  413:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  414:    {
    #####:  415:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  416:	{
    #####:  417:	  j++;
        -:  418:	}
        -:  419:    }
    #####:  420:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  421:    {
    #####:  422:      return 1;
        -:  423:    }
        -:  424:
    #####:  425:  return 0;
        -:  426:}
        -:  427:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  428:int scoreFor (int player, struct gameState *state) {
        -:  429:
        -:  430:  int i;
    #####:  431:  int score = 0;
        -:  432:  //score from hand
    #####:  433:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from discard
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
        -:  454:  //score from deck
    #####:  455:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  456:    {
    #####:  457:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  460:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  461:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  462:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  463:    }
        -:  464:
    #####:  465:  return score;
        -:  466:}
        -:  467:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  468:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  469:  int i;	
        -:  470:  int j;
        -:  471:  int highScore;
        -:  472:  int currentPlayer;
        -:  473:
        -:  474:  //get score for each player
    #####:  475:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  476:    {
        -:  477:      //set unused player scores to -9999
    #####:  478:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  479:	{
    #####:  480:	  players[i] = -9999;
        -:  481:	}
        -:  482:      else
        -:  483:	{
    #####:  484:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  485:	}
        -:  486:    }
        -:  487:
        -:  488:  //find highest score
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  493:	{
    #####:  494:	  j = i;
        -:  495:	}
        -:  496:    }
    #####:  497:  highScore = players[j];
        -:  498:
        -:  499:  //add 1 to players who had less turns
    #####:  500:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  504:	{
    #####:  505:	  players[i]++;
        -:  506:	}
        -:  507:    }
        -:  508:
        -:  509:  //find new highest score
    #####:  510:  j = 0;
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  j = i;
        -:  516:	}
        -:  517:    }
    #####:  518:  highScore = players[j];
        -:  519:
        -:  520:  //set winners in array to 1 and rest to 0
    #####:  521:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  522:    {
    #####:  523:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  524:	{
    #####:  525:	  players[i] = 1;
        -:  526:	}
        -:  527:      else
        -:  528:	{
    #####:  529:	  players[i] = 0;
        -:  530:	}
        -:  531:    }
        -:  532:
    #####:  533:  return 0;
        -:  534:}
        -:  535:
function drawCard called 886 returned 100% blocks executed 38%
      886:  536:int drawCard(int player, struct gameState *state)
        -:  537:{	int count;
        -:  538:  int deckCounter;
      886:  539:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  540:    
        -:  541:    //Step 1 Shuffle the discard pile back into a deck
        -:  542:    int i;
        -:  543:    //Move discard to deck
    #####:  544:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  545:      state->deck[player][i] = state->discard[player][i];
    #####:  546:      state->discard[player][i] = -1;
        -:  547:    }
        -:  548:
    #####:  549:    state->deckCount[player] = state->discardCount[player];
    #####:  550:    state->discardCount[player] = 0;//Reset discard
        -:  551:
        -:  552:    //Shufffle the deck
    #####:  553:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  554:   
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  557:    }
        -:  558:    
    #####:  559:    state->discardCount[player] = 0;
        -:  560:
        -:  561:    //Step 2 Draw Card
    #####:  562:    count = state->handCount[player];//Get current player's hand count
        -:  563:    
        -:  564:    if (DEBUG){//Debug statements
        -:  565:      printf("Current hand count: %d\n", count);
        -:  566:    }
        -:  567:    
    #####:  568:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  569:
    #####:  570:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  571:      return -1;
        -:  572:
    #####:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  574:    state->deckCount[player]--;
    #####:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
        -:  578:  else{
      886:  579:    int count = state->handCount[player];//Get current hand count for player
        -:  580:    int deckCounter;
        -:  581:    if (DEBUG){//Debug statements
        -:  582:      printf("Current hand count: %d\n", count);
        -:  583:    }
        -:  584:
      886:  585:    deckCounter = state->deckCount[player];//Create holder for the deck count
      886:  586:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      886:  587:    state->deckCount[player]--;
      886:  588:    state->handCount[player]++;//Increment hand count
        -:  589:  }
        -:  590:
      886:  591:  return 0;
        -:  592:}
        -:  593:
function getCost called 656 returned 100% blocks executed 50%
      656:  594:int getCost(int cardNumber)
        -:  595:{
      656:  596:  switch( cardNumber ) 
branch  0 taken 2%
branch  1 taken 2%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 5%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 9%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 9%
branch 11 taken 9%
branch 12 taken 0%
branch 13 taken 9%
branch 14 taken 9%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 9%
branch 18 taken 0%
branch 19 taken 9%
branch 20 taken 0%
branch 21 taken 9%
branch 22 taken 9%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 9%
branch 26 taken 0%
branch 27 taken 0%
        -:  597:    {
        -:  598:    case curse:
       10:  599:      return 0;
        -:  600:    case estate:
       12:  601:      return 2;
        -:  602:    case duchy:
    #####:  603:      return 5;
        -:  604:    case province:
    #####:  605:      return 8;
        -:  606:    case copper:
       34:  607:      return 0;
        -:  608:    case silver:
    #####:  609:      return 3;
        -:  610:    case gold:
    #####:  611:      return 6;
        -:  612:    case adventurer:
       60:  613:      return 6;
        -:  614:    case council_room:
    #####:  615:      return 5;
        -:  616:    case feast:
    #####:  617:      return 4;
        -:  618:    case gardens:
       60:  619:      return 4;
        -:  620:    case mine:
       60:  621:      return 5;
        -:  622:    case remodel:
    #####:  623:      return 4;
        -:  624:    case smithy:
       60:  625:      return 4;
        -:  626:    case village:
       60:  627:      return 3;
        -:  628:    case baron:
    #####:  629:      return 4;
        -:  630:    case great_hall:
    #####:  631:      return 3;
        -:  632:    case minion:
       60:  633:      return 5;
        -:  634:    case steward:
    #####:  635:      return 3;
        -:  636:    case tribute:
       60:  637:      return 5;
        -:  638:    case ambassador:
    #####:  639:      return 3;
        -:  640:    case cutpurse:
       60:  641:      return 4;
        -:  642:    case embargo: 
       60:  643:      return 2;
        -:  644:    case outpost:
    #####:  645:      return 5;
        -:  646:    case salvager:
    #####:  647:      return 4;
        -:  648:    case sea_hag:
       60:  649:      return 4;
        -:  650:    case treasure_map:
    #####:  651:      return 4;
        -:  652:    }
        -:  653:	
    #####:  654:  return -1;
        -:  655:}
        -:  656:
function smithyEffect called 2 returned 100% blocks executed 100%
        2:  657:int smithyEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  658:	//******BUG******
       10:  659:	for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  660:	{
        8:  661:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  662:	}
        -:  663:
        -:  664:	//discard card from hand
        2:  665:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  666:	return 0;
        -:  667:}
        -:  668:
function adventurerEffect called 2 returned 100% blocks executed 73%
        2:  669:int adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state,  int temphand[]) {
        -:  670:
        -:  671:	//******BUG******
        -:  672:	int z;
        -:  673:	int cardDrawn;
        8:  674:	while (drawntreasure<2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4:  675:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  676:			shuffle(currentPlayer, state);
call    0 never executed
        -:  677:		}
        4:  678:		drawCard(currentPlayer, state);
call    0 returned 100%
        4:  679:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4:  680:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4:  681:			drawntreasure++;
        -:  682:		else {
    #####:  683:			temphand[z] = cardDrawn;
    #####:  684:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  685:			z++;
        -:  686:		}
        -:  687:	}
       18:  688:	while (z - 1 >= 0) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       14:  689:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       14:  690:		z = z - 1;
        -:  691:	}
        2:  692:	return 0;
        -:  693:}
        -:  694:
function stewardEffect called 6 returned 100% blocks executed 100%
        6:  695:int stewardEffect(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos) {
        6:  696:	if (choice1 == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  697:	{
        -:  698:		//+2 cards
        2:  699:		drawCard(currentPlayer, state);
call    0 returned 100%
        2:  700:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  701:	}
        4:  702:	else if (choice1 == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  703:	{
        -:  704:		//+2 coins
        2:  705:		state->coins = state->coins + 2;
        -:  706:	}
        -:  707:	else
        -:  708:	{
        -:  709:		//trash 2 cards in hand
        -:  710:		//******BUG******
        2:  711:		discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        2:  712:		discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:  713:	}
        -:  714:
        -:  715:	//discard card from hand
        6:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:  717:	return 0;
        -:  718:}
        -:  719:
function cutpurseEffect called 6 returned 100% blocks executed 79%
        6:  720:int cutpurseEffect(int currentPlayer, struct gameState * state, int handPos) {
        6:  721:	updateCoins(currentPlayer, state, 2);
call    0 returned 100%
        -:  722:	int i;
        -:  723:	int j;
        -:  724:	int k;
       24:  725:	for ( i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  726:	{
       18:  727:		if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  728:		{	//******BUG******
       12:  729:			for ( j = 0; j <= state->handCount[i]; j++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  730:			{
       12:  731:				if (state->hand[i][j] == copper)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  732:				{
    #####:  733:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  734:					break;
        -:  735:				}
       12:  736:				if (j == state->handCount[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  737:				{
       12:  738:					for ( k = 0; k < state->handCount[i]; k++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  739:					{
        -:  740:						if (DEBUG)
        -:  741:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  742:					}
       12:  743:					break;
        -:  744:				}
        -:  745:			}
        -:  746:
        -:  747:		}
        -:  748:
        -:  749:	}
        -:  750:
        -:  751:	//discard played card from hand
        6:  752:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  753:
        6:  754:	return 0;
        -:  755:}
        -:  756:
function ambassadorEffect called 0 returned 0% blocks executed 0%
    #####:  757:int ambassadorEffect(int choice1, int choice2, struct gameState * state, int currentPlayer, int handPos) {
    #####:  758:	int j = 0;		//used to check if player has enough cards to discard
        -:  759:
    #####:  760:	if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:		return -1;
        -:  763:	}
        -:  764:
    #####:  765:	if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:		return -1;
        -:  768:	}
        -:  769:
    #####:  770:	for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	{	
    #####:  772:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  773:		{
    #####:  774:			j++;
        -:  775:		}
        -:  776:	}
    #####:  777:	if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  778:	{
    #####:  779:		return -1;
        -:  780:	}
        -:  781:
        -:  782:	if (DEBUG)
        -:  783:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  784:
        -:  785:	//increase supply count for choosen card by amount being discarded
    #####:  786:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  787:
        -:  788:	//each other player gains a copy of revealed card
    #####:  789:	for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  790:	{
    #####:  791:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  792:		{
    #####:  793:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  794:		}
        -:  795:	}
        -:  796:
        -:  797:	//discard played card from hand
    #####:  798:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  799:
        -:  800:	//trash copies of cards returned to supply
    #####:  801:	for (int j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  802:	{
    #####:  803:		for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  804:		{
    #####:  805:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  806:			{
    #####:  807:				discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  808:				break;
        -:  809:			}
        -:  810:		}
        -:  811:	}
        -:  812:
    #####:  813:	return 0;
        -:  814:}
        -:  815:
function cardEffect called 2 returned 100% blocks executed 8%
        2:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  //int k;
        -:  821:  int x;
        -:  822:  int index;
        2:  823:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
        2:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
        2:  828:  int drawntreasure=0;
        -:  829:
        -:  830:  //int z = 0;// this is the counter for the temp hand
        2:  831:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  832:    nextPlayer = 0;
        -:  833:  }
        -:  834:  
        -:  835:	
        -:  836:  //uses switch to select card and perform actions
        2:  837:  switch(card) 
branch  0 taken 0%
branch  1 taken 100%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  838:    {
        -:  839:    case adventurer:
    #####:  840:		return adventurerEffect( drawntreasure, currentPlayer,state, temphand);
call    0 never executed
        -:  841:			
        -:  842:    case council_room:
        -:  843:      //+4 Cards
       10:  844:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  845:	{
        8:  846:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  847:	}
        -:  848:			
        -:  849:      //+1 Buy
        2:  850:      state->numBuys++;
        -:  851:			
        -:  852:      //Each other player draws a card
        6:  853:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  854:	{
        4:  855:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  856:	    {
        2:  857:	      drawCard(i, state);
call    0 returned 100%
        -:  858:	    }
        -:  859:	}
        -:  860:			
        -:  861:      //put played card in played card pile
        2:  862:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  863:			
        2:  864:      return 0;
        -:  865:			
        -:  866:    case feast:
        -:  867:      //gain card with cost up to 5
        -:  868:      //Backup hand
    #####:  869:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  870:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  871:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  872:      }
        -:  873:      //Backup hand
        -:  874:
        -:  875:      //Update Coins for Buy
    #####:  876:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  877:      x = 1;//Condition to loop on
    #####:  878:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  879:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  880:	  if (DEBUG)
        -:  881:	    printf("None of that card left, sorry!\n");
        -:  882:
        -:  883:	  if (DEBUG){
        -:  884:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  885:	  }
        -:  886:	}
    #####:  887:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  888:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  889:
        -:  890:	  if (DEBUG){
        -:  891:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  892:	  }
        -:  893:	}
        -:  894:	else{
        -:  895:
        -:  896:	  if (DEBUG){
        -:  897:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  898:	  }
        -:  899:
    #####:  900:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  901:	  x = 0;//No more buying cards
        -:  902:
        -:  903:	  if (DEBUG){
        -:  904:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  905:	  }
        -:  906:
        -:  907:	}
        -:  908:      }     
        -:  909:
        -:  910:      //Reset Hand
    #####:  911:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  912:	state->hand[currentPlayer][i] = temphand[i];
    #####:  913:	temphand[i] = -1;
        -:  914:      }
        -:  915:      //Reset Hand
        -:  916:      			
    #####:  917:      return 0;
        -:  918:			
        -:  919:    case gardens:
    #####:  920:      return -1;
        -:  921:			
        -:  922:    case mine:
    #####:  923:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  924:
    #####:  925:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  926:	{
    #####:  927:	  return -1;
        -:  928:	}
        -:  929:		
    #####:  930:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  931:	{
    #####:  932:	  return -1;
        -:  933:	}
        -:  934:
    #####:  935:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  936:	{
    #####:  937:	  return -1;
        -:  938:	}
        -:  939:
    #####:  940:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  941:
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  944:
        -:  945:      //discard trashed card
    #####:  946:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  951:	      break;
        -:  952:	    }
        -:  953:	}
        -:  954:			
    #####:  955:      return 0;
        -:  956:			
        -:  957:    case remodel:
    #####:  958:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  959:
    #####:  960:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
    #####:  965:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  966:
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  969:
        -:  970:      //discard trashed card
    #####:  971:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  972:	{
    #####:  973:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  976:	      break;
        -:  977:	    }
        -:  978:	}
        -:  979:
        -:  980:
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case smithy:
        -:  984:      //+3 Cards
    #####:  985:		return smithyEffect(currentPlayer,state,handPos);
call    0 never executed
        -:  986:		
        -:  987:    case village:
        -:  988:      //+1 Card
    #####:  989:      drawCard(currentPlayer, state);
call    0 never executed
        -:  990:			
        -:  991:      //+2 Actions
    #####:  992:      state->numActions = state->numActions + 2;
        -:  993:			
        -:  994:      //discard played card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  996:      return 0;
        -:  997:		
        -:  998:    case baron:
    #####:  999:      state->numBuys++;//Increase buys by 1!
    #####: 1000:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1001:	int p = 0;//Iterator for hand!
    #####: 1002:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1003:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1004:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1005:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1006:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1007:	    state->discardCount[currentPlayer]++;
    #####: 1008:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1009:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1010:	    }
    #####: 1011:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1012:	    state->handCount[currentPlayer]--;
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
    #####: 1015:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1016:	    if(DEBUG) {
        -: 1017:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1018:	      printf("Must gain an estate if there are any\n");
        -: 1019:	    }
    #####: 1020:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1022:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1023:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:		isGameOver(state);
call    0 never executed
        -: 1025:	      }
        -: 1026:	    }
    #####: 1027:	    card_not_discarded = 0;//Exit the loop
        -: 1028:	  }
        -: 1029:			    
        -: 1030:	  else{
    #####: 1031:	    p++;//Next card
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:			    
        -: 1036:      else{
    #####: 1037:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1038:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1039:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1040:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1041:	    isGameOver(state);
call    0 never executed
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case great_hall:
        -: 1050:      //+1 Card
    #####: 1051:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1052:			
        -: 1053:      //+1 Actions
    #####: 1054:      state->numActions++;
        -: 1055:			
        -: 1056:      //discard card from hand
    #####: 1057:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case minion:
        -: 1061:      //+1 action
    #####: 1062:      state->numActions++;
        -: 1063:			
        -: 1064:      //discard card from hand
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1066:			
    #####: 1067:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1068:	{
    #####: 1069:	  state->coins = state->coins + 2;
        -: 1070:	}
        -: 1071:			
    #####: 1072:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1073:	{
        -: 1074:	  //discard hand
    #####: 1075:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1076:	    {
    #####: 1077:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1078:	    }
        -: 1079:				
        -: 1080:	  //draw 4
    #####: 1081:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	    {
    #####: 1083:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:	    }
        -: 1085:				
        -: 1086:	  //other players discard hand and redraw if hand size > 4
    #####: 1087:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	    {
    #####: 1089:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:		{
    #####: 1091:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1092:		    {
        -: 1093:		      //discard hand
    #####: 1094:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1095:			{
    #####: 1096:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1097:			}
        -: 1098:							
        -: 1099:		      //draw 4
    #####: 1100:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1101:			{
    #####: 1102:			  drawCard(i, state);
call    0 never executed
        -: 1103:			}
        -: 1104:		    }
        -: 1105:		}
        -: 1106:	    }
        -: 1107:				
        -: 1108:	}
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case steward:
    #####: 1112:		return stewardEffect( choice1, choice2,  choice3,  currentPlayer, state,  handPos);
call    0 never executed
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1159:	  state->coins += 2;
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1163:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1164:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:		return ambassadorEffect(choice1, choice2, state, currentPlayer, handPos);
call    0 never executed
        -: 1175:		
        -: 1176:    case cutpurse:
    #####: 1177:		return cutpurseEffect(currentPlayer, state,handPos);
call    0 never executed
        -: 1178:
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
        -: 1264:}
        -: 1265:
function discardCard called 20 returned 100% blocks executed 89%
       20: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
       20: 1270:  if (trashFlag < 1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1271:    {
        -: 1272:      //add card to played pile
       16: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       16: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
       20: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
       20: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
        4: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
       16: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
       16: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
       16: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
       16: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
       20: 1301:  return 0;
        -: 1302:}
        -: 1303:
        -: 1304://unit test
        -: 1305://check supply 
        -: 1306://check to Flag
        -: 1307://check what card
        -: 1308:
function gainCard called 3316 returned 100% blocks executed 100%
     3316: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:	
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
     3316: 1314:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 82% (fallthrough)
branch  2 taken 18%
        -: 1315:    {
     2712: 1316:      return -1;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
      604: 1324:  if (toFlag == 1)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1325:    {
      196: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      196: 1327:      state->deckCount[player]++;
        -: 1328:    }
      408: 1329:  else if (toFlag == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -: 1330:    {
      212: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      212: 1332:      state->handCount[player]++;
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
      196: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      196: 1337:      state->discardCount[player]++;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //decrease number in supply pile
      604: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:	 
      604: 1343:  return 0;
        -: 1344:}
        -: 1345:
function updateCoins called 172 returned 100% blocks executed 82%
      172: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:  int i;
        -: 1349:	
        -: 1350:  //reset coin count
      172: 1351:  state->coins = 0;
        -: 1352:  //add coins for each Treasure card in player's hand
     1032: 1353:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1354:    {
      860: 1355:		  if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1356:		{
      650: 1357:		  state->coins += 1;
        -: 1358:		}
      210: 1359:		  else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:		{
    #####: 1361:		  state->coins += 2;
        -: 1362:		}
      210: 1363:		  else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1364:		{
    #####: 1365:		  state->coins += 3;
        -: 1366:		}	
        -: 1367:    }	
        -: 1368:  //add bonus
      172: 1369:  state->coins += bonus;
      172: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
